//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PPSDonationEntities : DbContext
    {
        public PPSDonationEntities()
            : base("name=PPSDonationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Donation> Donations { get; set; }
        public virtual DbSet<DonationCertificate> DonationCertificates { get; set; }
        public virtual DbSet<DonationStatu> DonationStatus { get; set; }
        public virtual DbSet<Donor> Donors { get; set; }
        public virtual DbSet<DonorType> DonorTypes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<AspNetStudent> AspNetStudents { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddStudent_isp(string firstname, string lastname, string university, string qualification, Nullable<System.DateTime> yearofStudy, Nullable<System.DateTime> yearofRequest, Nullable<int> academicAverage, Nullable<double> amountofFundingNeeded, string whatTheFundingWillBeUsedFor, string bio, string motivation, string cellNumber, Nullable<bool> cellNumberConfimed, string email, Nullable<bool> emailConfimed, byte[] picture)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var yearofStudyParameter = yearofStudy.HasValue ?
                new ObjectParameter("YearofStudy", yearofStudy) :
                new ObjectParameter("YearofStudy", typeof(System.DateTime));
    
            var yearofRequestParameter = yearofRequest.HasValue ?
                new ObjectParameter("YearofRequest", yearofRequest) :
                new ObjectParameter("YearofRequest", typeof(System.DateTime));
    
            var academicAverageParameter = academicAverage.HasValue ?
                new ObjectParameter("AcademicAverage", academicAverage) :
                new ObjectParameter("AcademicAverage", typeof(int));
    
            var amountofFundingNeededParameter = amountofFundingNeeded.HasValue ?
                new ObjectParameter("AmountofFundingNeeded", amountofFundingNeeded) :
                new ObjectParameter("AmountofFundingNeeded", typeof(double));
    
            var whatTheFundingWillBeUsedForParameter = whatTheFundingWillBeUsedFor != null ?
                new ObjectParameter("WhatTheFundingWillBeUsedFor", whatTheFundingWillBeUsedFor) :
                new ObjectParameter("WhatTheFundingWillBeUsedFor", typeof(string));
    
            var bioParameter = bio != null ?
                new ObjectParameter("Bio", bio) :
                new ObjectParameter("Bio", typeof(string));
    
            var motivationParameter = motivation != null ?
                new ObjectParameter("Motivation", motivation) :
                new ObjectParameter("Motivation", typeof(string));
    
            var cellNumberParameter = cellNumber != null ?
                new ObjectParameter("CellNumber", cellNumber) :
                new ObjectParameter("CellNumber", typeof(string));
    
            var cellNumberConfimedParameter = cellNumberConfimed.HasValue ?
                new ObjectParameter("CellNumberConfimed", cellNumberConfimed) :
                new ObjectParameter("CellNumberConfimed", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailConfimedParameter = emailConfimed.HasValue ?
                new ObjectParameter("EmailConfimed", emailConfimed) :
                new ObjectParameter("EmailConfimed", typeof(bool));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudent_isp", firstnameParameter, lastnameParameter, universityParameter, qualificationParameter, yearofStudyParameter, yearofRequestParameter, academicAverageParameter, amountofFundingNeededParameter, whatTheFundingWillBeUsedForParameter, bioParameter, motivationParameter, cellNumberParameter, cellNumberConfimedParameter, emailParameter, emailConfimedParameter, pictureParameter);
        }
    }
}
